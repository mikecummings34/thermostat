#!/usr/bin/python
import os
import glob
import RPi.GPIO as GPIO
import time

#global variables for settings
active_target_temp = None
active_thermo_mode = None

#DS18b20 sensor initiate
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')
base_dir = '/sys/bus/w1/devices/'
device_folder = glob.glob(base_dir + '28*')[0]
device_file = device_folder + '/w1_slave'


#Relay Switch Initiate
GPIO.setmode(GPIO.BCM)
pinList = [2, 3, 4, 17]
for i in pinList:
	GPIO.setup(i, GPIO.OUT)
	GPIO.output(i, GPIO.HIGH)

def ThermoManager(target_temp, temp_f):
	try:
		temp_f = read_temp()
		if target_temp > temp_f:
			GPIO.output(2, GPIO.LOW)
			ThermoManager(target_temp, read_temp())
		else:
			RunThermoApp()
	except:
		pass
#manage switches based on temperature and heat/cool setting
def relay_control(target_temp, therm_setting):
	try:
		temp_f = read_temp()
		if therm_setting == "hot":
			if target_temp <= temp_f:
				if GPIO.input(2) == 0:
					GPIO.output(2, GPIO.HIGH)
					ThermoManager(target_temp, temp_f)
				else:
					print('target temp reached. Pin already off')
					ThermoManager(target_temp, temp_f)
			else:
				try:
					ThermoManager(target_temp, temp_f)
				except:
					print('heat already on. Check for malfunction')
		elif therm_setting == "cold":
			print('cold setting')
		else:
			print('try succesful but function failed')
	except:
		print('error relay control function not working')



#Temperature Read and Parse Function
def read_temp_raw():
    f = open(device_file, 'r')
    lines = f.readlines()
    f.close()
    return lines
 
def read_temp():
    lines = read_temp_raw()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0 / 5.0 + 32.0
        return round(temp_f, 1)

#Simple function to grab the current time 
from datetime import datetime
def get_time():
    return(datetime.now().strftime("%b %d, %Y %I:%M:%S %p"))

#call this function to set new target temperature. 
def SetTargetTemp(target_temp = None):
	global active_target_temp
	if target_temp == None:
		return active_target_temp
	else:
		active_target_temp = target_temp
		return active_target_temp

def SetThermoMode(thermo_mode = None):
	global active_thermo_mode
	if thermo_mode == None:
		return active_thermo_mode
	else:
		active_thermo_mode = thermo_mode
		return active_thermo_mode
	
    
def RunThermoApp():
	while True:
	    try:
    	    print(read_temp(), GPIO.input(2))
        	relay_control(SetTargetTemp(), SetThermoMode())
        	time.sleep(1)
	
	    except KeyboardInterrupt:
    	    print("Quit")
    	    GPIO.cleanup()

def RunThermoApp():
	while True:
		try:
			print(read_temp(), GPIO.input(2))
			relay_control(SetTargetTemp(), SetThermoMode())
			time.sleep(1)
		except KeyboardInterrupt:
			print("Quit")
			GPIO.cleanup()